import os, subprocess, re
import threading
import walb_worker
from walblib.worker import *
import collections
"""
REQUIREMENT:

sudo make stest0 OPT="n1"
walbc.init_storage(s0, 'vol1', '/dev/walb/1')
walbc.full_backup(s0, 'vol1')
walbc.init_storage(s0, 'vol2', '/dev/walb/2')
walbc.full_backup(s0, 'vol2')

"""

g_testNum = 0
g_errNum = 0

def expectTrue(msg, b):
    global g_testNum
    global g_errNum
    g_testNum += 1
    if not b:
        print 'ERR:expectTrue', msg
        g_errNum += 1

def expectEqual(msg, lhs, rhs):
    global g_testNum
    global g_errNum
    g_testNum += 1
    if lhs != rhs:
        print 'ERR:expectEqual', msg
        print ' lhs', lhs
        print ' rhs', rhs
        g_errNum += 1

CONF="""
general:
  addr: localhost
  port: 10200
  walbc_path: binsrc/walbc
  max_task: 2
  max_replication_task: 5
  kick_interval: 1
apply:
  keep_period: 10
  interval: 100
merge:
  interval: 10
  max_nr: 10
  max_size: 1M
  threshold_nr: 5
repl:
  servers:
    repl0:
      addr: localhost
      port: 10201
      interval: 20
      compress: snappy:0:1
      max_merge_size: 5K
      max_send_size: 1G
      bulk_size: 4K
      log_name: pqr
"""
execfile('stest/config0.py')

def makeDiff(idx=0, bs=512,wait=True):
    print "write data to vol{} bs={}".format(idx, bs)
    !dd if=/dev/urandom of=/dev/walb/{idx} count=1k bs={bs} 2>1 1>/dev/null
    if wait:
        walbc.snapshot(s0, 'vol' + str(idx), [a0])

def rewriteBase():
    base = walbc.get_base(a0, VOL)
    if base.E is None:
        print 'change', base,
        latest = walbc.get_latest_clean_snapshot(a0, VOL)
        if base.E != latest:
            base.E = Snapshot(latest, latest)
            print 'to', base
    s = '"' + str(base) + '"'
    !binsrc/walbc -a localhost -p 10200 dbg-set-base vol0 {s}

RE_LOG = re.compile('(\d{4}-\d\d-\d\d \d\d:\d\d:\d\d\.\d{6}) ([A-Z]+) ([^:]+):name=([^ ]+) vol=([^ ]+)')
Log = collections.namedtuple('Log', 'time level action name vol')

def parseLog(s):
    ls = []
    for line in s.split('\n'):
        p = RE_LOG.match(line)
        if p:
            time = p.group(1)
            level = p.group(2)
            action = p.group(3)
            name = p.group(4)
            vol = p.group(5)
            if action.find('select') == 0:
                ls.append(Log(time, level, action, name, vol))
    return ls

def runWorker(cfg, step, lifetime=5):
    args = [
        '/usr/bin/python', 'python/walb_worker.py', '-f', '-',
        '-lifetime', str(lifetime), '-v', '-step', str(step),
    ]
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=sys.stderr, close_fds=True)
    ifs = p.stdin
    ifs.write(str(cfg))
    ifs.close()
    ofs = p.stdout
    s = ofs.read().strip()
    ret = p.wait()
    if ret != 0:
        raise Exception('runWorker err', args, ret)
    print>>sys.stderr, '-'*20
    print>>sys.stderr, s
    print>>sys.stderr, '-'*20
    return parseLog(s)


def parseTask(s):
    pos = s.find(':')
    if pos > 0:
        action = s[0:pos]
        task = s[pos+1:]
        return (action, task)
    else:
        return None

def testStep1(cfg):
    # do nothing if no diff
    log = runWorker(cfg, 1)
    expectEqual('STEP1_1',log, [])

    # make applying state, then ApplyTask1 will be selected
    makeDiff()
    time.sleep(3)
    rewriteBase()
    log = runWorker(cfg, 1)
    expectTrue('STEP1_2', log)
    if log:
        expectEqual('STEP1_3', log[0].action, 'selectApplyTask1')

def testStep2(cfg):
    makeDiff()
    # do nothing if in apply.interval
    cfg.apply_.interval = 86400 * 1000
    log = runWorker(cfg, 2)
    expectEqual('STEP2_1', log, [])

    # ApplyTask2 is selected immediately
    cfg.apply_.interval = 1
    log = runWorker(cfg, 2)
    expectTrue('STEP2_2', log)
    if log:
        expectEqual('STEP2_3', log[0].action, 'selectApplyTask2')
    makeDiff(0, 1024)
    makeDiff(2, 2048)
    # force to make diff
    print 'sleep'
    time.sleep(2)
    !ls -al stest/tmp/a0/vol*/*.wdiff
    cfg.apply_.interval = 5
    log = runWorker(cfg, 2, lifetime=20)
    expectTrue('STEP2_4', len(log) >= 2)
    if len(log) >= 2:
        expectEqual('STEP2_5', log[0].vol, 'vol0')
        expectEqual('STEP2_6', log[1].vol, 'vol2')

def resetDevice(volId):
    vol = 'vol' + str(volId)
    walbc.stop(s0, vol)
    walbc.hash_backup(s0, vol)

def main():
    cfg = Config()
    cfg.setStr(CONF)
    for volId in xrange(3):
        resetDevice(volId)
    testStep1(cfg)
    testStep2(cfg)
    print "test {} / {}".format(g_errNum, g_testNum)

if __name__ == "__main__":
    main()
